<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ennui Occlusion</title>
    <description>Exploring ideas of interest.
</description>
    <link>https://ennuiocclusion.github.io/</link>
    <atom:link href="https://ennuiocclusion.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 06 Feb 2018 17:27:48 -0800</pubDate>
    <lastBuildDate>Tue, 06 Feb 2018 17:27:48 -0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Logic Programming Silent Hill 3</title>
        <description>&lt;h1&gt;Convergent Circles&lt;/h1&gt;
&lt;p&gt;Every now and then you find an interesting overlap in diverse interests and it seems worth taking note of.&lt;/p&gt;
&lt;h2&gt;Logic Programming&lt;/h2&gt;
&lt;p&gt;I've been very interested in logic programming using MiniKannren after watching the presentation &lt;a href=&quot;https://www.youtube.com/watch?v=OyfBQmvr2Hc&quot;&gt;The Most Beautiful Program Ever Written&lt;/a&gt;. Logic programming requires a completely different mind-set going in. The functional approach at its most basic level consists of describing functions with which you can build up an answer. Logic program entails beginning with a set of unbound variables, which equate to any possible value, then constraing their possible values down until you have an answer.&lt;/p&gt;
&lt;h2&gt;Silent Hill&lt;/h2&gt;
&lt;p&gt;Silent Hill is a video game franchise published by Konami. While there is a lot to say about use and abuse of the license over time it is widely agreed that the original trilogy are masterpieces of the horror genre. Instead of going for cheap jump scares they make the player confront nightmarish horrors which are truly terrifying and confounding to comprehend.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A small, beautiful little team of passionate rejects and failures got their chance to make a spooky game followed up by arguably the most brilliant and beautifully crafted survival horror game ever made.&lt;/p&gt;
  &lt;p&gt;&amp;#8211; &lt;a href=&quot;https://www.youtube.com/watch?v=hycpdjjcnRE&quot;&gt;NakeyJakey&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Silent Hill games are built largely on two game mechanics. Combatting monsters and solving puzzles. At the start of every game the player must choose difficulty settings for these two components independently of each other. The puzzles in the game actually change their text based on how much of a mental challenge you want.&lt;/p&gt;
&lt;p&gt;I think this incorporation of puzzles actually helps enhance the horror you experience quite well. You are forced to engage the game with the very rational and logical parts of your brain. The same parts of your brain which fail to understand the horrific logic put forward by a nightmarish hellscape.&lt;/p&gt;
&lt;h1&gt;Programming Our Way Into The Hospital&lt;/h1&gt;
&lt;p&gt;Now to bring these two concepts together. In Silent Hill 3 after arriving at the town of Silent Hill proper you are left to once again explore the Brookhaven Hospital you explored previously in Silent Hill 2. Things have changed just enough from your previous visit to leave you uncomfortable.&lt;/p&gt;
&lt;p&gt;After making your way to the second floor and battling with sexy-zombie-bobble-head-nurses you are confronted with a locked door with a nine digit key pad and a riddle with its key combination.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;The first is larger than the second;
    the second twice the third;
    the third smaller than the fourth;
    the fourth is half the first.&lt;/p&gt;
  &lt;p&gt;Four of the numbers
    are not repeated
    Three are not in the top row
    Two are not in the right row
    One of the numbers is the final key&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Deciphering this riddle requires following logical constraints and making relationships between the digits &amp;#8211; a problem perfectly in the domain of logic based programming! So without further ado, let's code!&lt;/p&gt;
&lt;h1&gt;Setting Things Up&lt;/h1&gt;
&lt;p&gt;First we make a new Clojure app with leiningen with:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;bash&quot;&gt;
lein new app sh-logic
&lt;/pre&gt;
&lt;p&gt;Next, we need to include the core.logic library in our Clojure project. So we change our &lt;code&gt;project.clj&lt;/code&gt; file to have the following dependencies:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojure&quot;&gt;
:dependencies [[org.clojure/clojure &amp;quot;1.9.0&amp;quot;]
               [org.clojure/core.logic &amp;quot;0.8.11&amp;quot;]]
&lt;/pre&gt;
&lt;p&gt;Install our dependencies:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;bash&quot;&gt;
lein deps
&lt;/pre&gt;
&lt;p&gt;And finally we get our &lt;code&gt;src/sh_logic/core.clj&lt;/code&gt; ready to write logic code by using the &lt;code&gt;core.logic&lt;/code&gt; and requiring the &lt;code&gt;core.logic.fd&lt;/code&gt; libraries:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojure&quot;&gt;
(ns sh-logic.core
  (:gen-class)
  (:refer-clojure :exclude [==])
  (:use [clojure.core.logic])
  (:require [clojure.core.logic.fd :as fd]))
&lt;/pre&gt;
&lt;h1&gt;Getting Logical&lt;/h1&gt;
&lt;p&gt;What we're actually after here is a function we can call which will return the answer to our puzzle. It should ask the core.logic solver to find all values for q which could be our answer. So let's make that:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojure&quot;&gt;
(defn solve-puzzle []
  (run* [q]

    ))
&lt;/pre&gt;
&lt;p&gt;All of our following code will go inside this run* statement.&lt;/p&gt;
&lt;h2&gt;Defining q&lt;/h2&gt;
&lt;p&gt;At this point q is an unbound variable which could be anything. That's not very helpful. So let's tell core.logic what q should be, a list of four variables holding our answer. We introduce the new variables representing each digit with &lt;code&gt;fresh&lt;/code&gt;. We then unify the list of these digits with q using &lt;code&gt;==&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojure&quot;&gt;
(fresh [a b c d]
  (== q [a b c d]))
&lt;/pre&gt;
&lt;p&gt;At this point running our program gives us the following output:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojure&quot;&gt;
([_0 _1 _2 _3])
&lt;/pre&gt;
&lt;p&gt;Roughly translated this means our answer is a list of four variables which could be anything.&lt;/p&gt;
&lt;h2&gt;Limiting to a Finite Domain&lt;/h2&gt;
&lt;p&gt;Now we know that our unbound variables can't be literally any value. They each have to be one of the values 1 through 9. We can apply this constraint to our answers with the &lt;code&gt;fd/in&lt;/code&gt; function. This lets us define a &lt;code&gt;fd/domain&lt;/code&gt;, which is a list of numbers that are possible values. We can then apply this constratint over our list of numbers with the &lt;code&gt;everyg&lt;/code&gt; function which lets us apply this constraint over a list of variables.&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojure&quot;&gt;
(everyg #(fd/in % (fd/domain 1 2 3 4 5 6 7 8 9)) [a b c d])
&lt;/pre&gt;
&lt;p&gt;Now the ouput of our function looks like this:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojure&quot;&gt;
([1 1 1 1] [2 1 1 1] [1 2 1 1] [3 1 1 1] [1 1 2 1] [2 2 1 1] [1 1 1 2] [1 3 1 1] [4 1 1 1] [2 1 2 1] [1 2 2 1] [1 1 1 3] ...)
&lt;/pre&gt;
&lt;p&gt;This is a list of every possible combination of four digit numbers. Very interesting!&lt;/p&gt;
&lt;h2&gt;The first is larger than the second;&lt;/h2&gt;
&lt;p&gt;Now we can start describing relationships amongst our variables. &lt;code&gt;core.logic.fd&lt;/code&gt; has a few different operator which map directly to the relationships of the riddle. The following is almost a direct trasncription of this line into code:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojure&quot;&gt;
(fd/&amp;gt; a b)
&lt;/pre&gt;
&lt;p&gt;Now our output is as follows:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojure&quot;&gt;
([2 1 1 1] [3 1 1 1] [2 1 2 1] [2 1 1 2] [4 1 1 1] [3 2 1 1] ...)
&lt;/pre&gt;
&lt;p&gt;Notice that any value where the first digit is less than or equal to the second digit is gone.  We're finally getting somewhere.&lt;/p&gt;
&lt;h2&gt;the second twice the third;&lt;/h2&gt;
&lt;p&gt;We can once again use a &lt;code&gt;core.logic.fd&lt;/code&gt; constraint to directly transcribe this line:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojure&quot;&gt;
(fd/* c 2 b)
&lt;/pre&gt;
&lt;p&gt;Our output is now pruned to satisfying these constraints:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojure&quot;&gt;
([3 2 1 1] [4 2 1 1] [3 2 1 2] [3 2 1 3] [5 2 1 1] [3 2 1 4] ...)
&lt;/pre&gt;
&lt;h2&gt;the third smaller than the fourth; the fourth is half the first.&lt;/h2&gt;
&lt;p&gt;Now it's just the same gag for these next two lines, so let's get them in one go.&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojure&quot;&gt;
(fd/&amp;lt; c d)
(fd/* d 2 a)
&lt;/pre&gt;
&lt;p&gt;This leads us to the following ouput:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojure&quot;&gt;
([4 2 1 2] [6 2 1 3] [8 2 1 4] [6 4 2 3] [8 4 2 4] [8 6 3 4])
&lt;/pre&gt;
&lt;p&gt;Aha! We're getting close.&lt;/p&gt;
&lt;h2&gt;Four of the numbers are not repeated&lt;/h2&gt;
&lt;p&gt;This calls for a new type of constraint &amp;#8211; &lt;code&gt;fd/distinct&lt;/code&gt;. This ensures that no two variables have the same value.&lt;/p&gt;
&lt;p&gt;On a side note this constraint is the basis for an absurdly terse Sudoku solver where you simply split the puzzle into rows, columns, and squares then ensure they are all distinct.&lt;/p&gt;
&lt;p&gt;For now, let's constrain our digits.&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojure&quot;&gt;
(fd/distinct [a b c d])
&lt;/pre&gt;
&lt;p&gt;Which leaves us dangerously close to a solution:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojure&quot;&gt;
([6 2 1 3] [8 2 1 4] [6 4 2 3] [8 6 3 4])
&lt;/pre&gt;
&lt;h2&gt;Three are not in the top row&lt;/h2&gt;
&lt;p&gt;This line is particulary tricky in wording and difficult to implement. The top row are the values &lt;code&gt;1 2 3&lt;/code&gt;. This means that one number may or may not be 3 or less. It would be quite simple to at this point just write a predicate function and filter over the output of our logic program. I want to however solve this puzzle entirely using logic.&lt;/p&gt;
&lt;p&gt;My current solution is as follows:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Create four new logic variables&lt;/li&gt;
  &lt;li&gt;Attach each to one of the original four variables&lt;/li&gt;
  &lt;li&gt;Ensure that the first is less than the other three, the second less than the next two, and the third less than the fourth&lt;/li&gt;
  &lt;li&gt;Ensure that the second of these is greater than 3&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That is, sort the numbers then make sure that the three largest are greater than three. In code this is:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojure&quot;&gt;
(fresh [l1 l2 l3 l4]
  (everyg #(membero % q) [l1 l2 l3 l4])
  (fd/distinct [l1 l2 l3 l4])
  (fd/&amp;lt; l1 l2)
  (fd/&amp;lt; l1 l3)
  (fd/&amp;lt; l1 l4)
  (fd/&amp;lt; l2 l3)
  (fd/&amp;lt; l2 l4)
  (fd/&amp;lt; l3 l4)
  (fd/&amp;gt; l2 3))
&lt;/pre&gt;
&lt;p&gt;This finally gives us a single solution:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojure&quot;&gt;
([8 6 3 4])
&lt;/pre&gt;
&lt;p&gt;Entering this code opens the door and let's us continue on.&lt;/p&gt;
&lt;h2&gt;All Together Now&lt;/h2&gt;
&lt;p&gt;The complete code is available at &lt;a href=&quot;https://github.com/EnnuiOcclusion/sh-logic&quot;&gt;https://github.com/EnnuiOcclusion/sh-logic&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Next Steps&lt;/h1&gt;
&lt;p&gt;I like the creativity of that last solution, but I'd like something more expressive. I'd like to both generalize lvar sorting into a function called &lt;code&gt;sorto&lt;/code&gt; and also come up with a constraint which roughly translates to &amp;#8220;ensure that only one member of q is in the set [1 2 3]&amp;#8221;. Any help on this is appreciated. I'll update if I find either of these.&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Jan 2018 10:48:00 -0800</pubDate>
        <link>https://ennuiocclusion.github.io/2018/01/11/logic-programming-silent-hill-3.html</link>
        <guid isPermaLink="true">https://ennuiocclusion.github.io/2018/01/11/logic-programming-silent-hill-3.html</guid>
        
        <category>clojure</category>
        
        <category>logic</category>
        
        <category>silent-hill</category>
        
        <category>horror</category>
        
        
      </item>
    
      <item>
        <title>Git for Film-Making</title>
        <description>&lt;h1&gt;There Has To Be A Better Way&lt;/h1&gt;
&lt;p&gt;Since I started working in video production it has consistently amazed me how much of modern film-making is just being comfortable with computers. Before you can complete almost any task in a production pipeline you need a strong foundation of proper file management. Leading a project is like captaining an old wooden ship upon a treacherous voyage. Projects will mercilessly devolve into unyielding Krakens of broken dependencies if strict discipline is not maintained.&lt;/p&gt;
&lt;p&gt;I love discussing ideas for how things can be done better with anyone willing to listen. A close friend of mine attending Visual Effects school and explaining their pipeline opened my eyes to possibilities of having someone take command and require adherence to a policy. No task is ever more complicated than you can accomplish if you are able to consistently break all problems done into self dependent pieces matched to your available tool-set.&lt;/p&gt;
&lt;p&gt;Software development has many of the same issues a film project has. You have large visions to accomplish that must be tackled by a variety of specialists. You want to track progress over time. You want people to be able to work on different sections concurrently and have sane mergers of their progress into the final result.&lt;/p&gt;
&lt;h1&gt;A Deal So Crazy, They're Just Giving It Away&lt;/h1&gt;
&lt;p&gt;Some unbelievably useful tools have come from the Open Source movement. When really smart people are able to argue in the commons about the best way to tackle a problem you get some beautiful yet confounding answers. The staggering power of Emacs is matched only by the abstract brutality of its default appearance.&lt;/p&gt;
&lt;p&gt;The tool which was made to make other tools is known as Git. It was developed by Linus Torvalds &amp;#8211;the mastermind of Linux&amp;#8211; to manage combining the programming efforts of countless volunteers. He explains the project in this &lt;a href=&quot;https://www.youtube.com/watch?v=4XpnKHJAok8&quot;&gt;video&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Git can be a bit difficult to use because what it's actually doing behind the scenes is complicated. The software also respects that the person using it is a completely rational person capable of learning new ideas. It doesn't pull any punches and just requires some consistent use to get the fundamentals down. This &lt;a href=&quot;https://blog.jayway.com/2013/03/03/git-is-a-purely-functional-data-structure/&quot;&gt;post&lt;/a&gt; does an excellent job of explaining the logic. This &lt;a href=&quot;http://tom.preston-werner.com/2009/05/19/the-git-parable.html&quot;&gt;post&lt;/a&gt; does an incredible job of building up the pieces of Git and explains how such an odd beast came to be.&lt;/p&gt;
&lt;h1&gt;Shake 'N Bake&lt;/h1&gt;
&lt;p&gt;So how do we use this software for a film project. To begin with, you have a template project. We can use git to do this by making a repository that has all the blank folders we will need. We can save this project on GitHub, then every time we wish to start a new project just clone the repository.&lt;/p&gt;
&lt;p&gt;The code to do so looks thus:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;bash&quot;&gt;
git clone https://github.com/EnnuiOcclusion/pipeline_template.git my_new_project
&lt;/pre&gt;
&lt;p&gt;This creates the following directory structure:&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
my_new_project/
├── 00_Reference
│   ├── Location
│   ├── Scripts
│   └── Sketches
├── 01_Development
│   ├── Boards
│   ├── Renders
│   ├── Research
│   └── Working\ Files
├── 02_Assets
│   ├── 3D
│   ├── Animations
│   ├── Audio
│   │   ├── Music
│   │   ├── SFX
│   │   ├── Scratch
│   │   └── VO
│   ├── Demos
│   ├── Fonts
│   ├── Footage
│   ├── Icons
│   ├── Images
│   │   ├── Product\ Photography
│   │   └── Stock\ Photos
│   ├── Logos
│   ├── PSD
│   └── Vectors
├── 03_3D
│   ├── Assets
│   ├── Autosave
│   ├── Cache
│   ├── Data
│   ├── Images
│   ├── Renders
│   ├── Scenes
│   └── sourceImages
├── 04_2D
│   ├── Renders
│   │   ├── Animations
│   │   ├── Frames
│   │   ├── Print
│   │   ├── Videos
│   │   └── preComps
│   └── Working\ Files
│       ├── After\ Effects
│       ├── Illustrator
│       ├── InDesign
│       ├── Keynote
│       ├── Nuke
│       │   └── shot1
│       └── Photoshop
├── 05_Edit
│   ├── Premiere
│   └── Renders
├── 06_Delivery
│   ├── Approval
│   ├── Final
│   └── Slide\ Deck
├── 07_Breakdown
│   ├── Renders
│   └── Working\ Files
└── 08_TEMP

62 directories, 0 files
&lt;/pre&gt;
&lt;p&gt;This is a very large project scaffold that is designed to cover a large number of edge cases. It was designed by some friends who were doing a wide variety of work which ranged from VR production through conference keynote product reveals.&lt;/p&gt;
&lt;p&gt;It should be self explanatory what goes where. Just save the files in the folder which matches your stage of production.&lt;/p&gt;
&lt;h1&gt;Set It And Forget It&lt;/h1&gt;
&lt;p&gt;Now we're ready for some Git magic. As you're working on your project and making progress you want to leave a record of what you've done and have the ability to return to previous versions. Anyone who's worked on a creative project has no doubt had a folder that looked like this.&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
comps
├── comp_final.psd
├── comp_final_FINAL.psd
├── comp_final_FINAL_v2.psd
├── comp_final_FINAL_v2_newLogo.psd
├── comp_final_FINAL_v3.psd
├── comp_rough.psd
└── comp_rough_v2.psd

0 directories, 7 files
&lt;/pre&gt;
&lt;p&gt;Unintuitive to follow at the very least. Git provides the mechanism through which we'll version our project. When we are working on a project we have what is known as the staging area. This is just all the directories and files below where our &lt;code&gt;.git&lt;/code&gt; folder that contains our project exists. When we've reached a point we would like to have a version of our project remembered we perform what is known as a commit. We tell Git which files are part of this checkpoint &amp;#8211;we &lt;code&gt;stage&lt;/code&gt; files&amp;#8211; then we &lt;code&gt;commit&lt;/code&gt; them with a short message saying what these changes accomplished.&lt;/p&gt;
&lt;p&gt;Now you will have a single file which is the soul source of truth for that part of your project. If for any reason you would like to jump back to an old version of your project you will have a nice log describing all the changes to your project which you can jump back to at any point in time.&lt;/p&gt;
&lt;p&gt;Now it's just a matter of determining which files you actually wish to commit to version control. This is an area I'm still experimenting with. It's important to remember that files committed to a Git project will remain there and take up additional space in each new version that is committed.&lt;/p&gt;
&lt;p&gt;Easy candidates for version control are project files, scripts, and notes. Large files which will change often, like individual frames coming out of your renderer are probably best left not committed as you only care about the most recent versions; proxy h.264s of your renders should be committed along side their source projects.&lt;/p&gt;
&lt;h1&gt;Double The Freshness, Double The Fun&lt;/h1&gt;
&lt;p&gt;Now you have a sweet log-book/time-machine tracking your progress on your project. But it's time to get serious work done and you're calling in all the favors for help from your friends.&lt;/p&gt;
&lt;p&gt;If there is just a single file for everything how do you collaborate together?
  Branches!&lt;/p&gt;
&lt;p&gt;At any point you can &lt;code&gt;checkout&lt;/code&gt; a new Git branch. This allows you to freely make changes to any files without worrying about messing up the &lt;code&gt;master&lt;/code&gt; copy of your project.&lt;/p&gt;
&lt;p&gt;Once you are happy with the changes you ask Git to &lt;code&gt;merge&lt;/code&gt; the two branches. Git will attempt to sanely combine all changes into a single branch. For files which cannot be combined you are responsible for making the merges.&lt;/p&gt;
&lt;p&gt;Let's work through the example of a Premiere project I want my friend Dave to cut together a rough cut in. I create a branch for them called &lt;code&gt;daves-rough-cut&lt;/code&gt;. They open up the single premiere project which already has my edit and all the logged footage in it. Dave creates a new sequence and edits away. When he's done and I'm ready to bring that sequence back into my project, I just import only his sequence into my master project and commit the changes. If work is going to be more involved than a single sequence it may be best to break that video off into its own Premiere project entirely. Either way simplicity and keeping a firm grasp on who is responsible for what is key.&lt;/p&gt;
&lt;p&gt;Branches are also very effective for when you just want to test out new ideas. Maybe you'd like to try incorporating a new software package into a project, but aren't sure about using it yet. Just make a new branch and make as many changes as you want. If you're unhappy with the results just switch back to your main branch and nothing ever happened. If you do like the results, then merge like there's no tomorrow.&lt;/p&gt;
&lt;h1&gt;So Easy A Caveman Could Do It&lt;/h1&gt;
&lt;p&gt;Performing these actions depends on the &lt;a href=&quot;https://stackoverflow.com/questions/6976473/what-does-the-term-porcelain-mean-in-git#6978402&quot;&gt;porcelain&lt;/a&gt; you are using. Working directly from the command line gives you the most control, but is also the least user friendly. Figuring things out often comes down to &lt;a href=&quot;https://en.wikipedia.org/wiki/RTFM&quot;&gt;RTFM&lt;/a&gt; while not even knowing what to look for. Luckily countless others have struggled before you and StackOverflow has got your back.&lt;/p&gt;
&lt;p&gt;There are a variety of good GUI options &lt;a href=&quot;https://git-scm.com/downloads/guisavailable&quot;&gt;available&lt;/a&gt;. &lt;a href=&quot;https://desktop.github.com/&quot;&gt;GitHub Desktop&lt;/a&gt; seems like the best candidate for someone new to the process.&lt;/p&gt;
&lt;p&gt;My personal tool of choice is &lt;a href=&quot;https://magit.vc/&quot;&gt;Magit&lt;/a&gt;. It's remarkably intuitive to use if you are already doing a large amount of work inside of Emacs. It comes pre-installed with SpaceMacs &amp;#8211; default binding of &lt;code&gt;&amp;lt;spc&amp;gt; g&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The documentation of any of these programs will have far more information on their use than I can provide now. I may follow up with another post showing at least my typical use in Magit.&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Jan 2018 10:48:00 -0800</pubDate>
        <link>https://ennuiocclusion.github.io/2018/01/11/git-for-filmmaking.html</link>
        <guid isPermaLink="true">https://ennuiocclusion.github.io/2018/01/11/git-for-filmmaking.html</guid>
        
        <category>git</category>
        
        <category>film-making</category>
        
        <category>pipeline</category>
        
        
      </item>
    
      <item>
        <title>Notes On Color Grading</title>
        <description>&lt;h1&gt;Source&lt;/h1&gt;
&lt;p&gt;This is a set of notes I compiled for my friend who was interested in making his videos look better. I figured this would make for an interesting post, so I'm copying it as sent.&lt;/p&gt;
&lt;h1&gt;Notes on Coloring&lt;/h1&gt;
&lt;h2&gt;Pipeline&lt;/h2&gt;
&lt;p&gt;Here's my typical node layout in Resolve if I'm doing a full color grade based off footage shot in S-Log2.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;[ ] 3D-Lut - S-Log2 =&amp;gt; Linear&lt;/li&gt;
  &lt;li&gt;[ ] Gain - .5
    &lt;ul&gt;
      &lt;li&gt;This removes the stop I overexpose shooting&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;[ ] 3D-Lut - Liner =&amp;gt; Cineon
    &lt;ul&gt;
      &lt;li&gt;Want to be in log space for creative adjustments&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;[ ] Creative Grading&lt;/li&gt;
  &lt;li&gt;[ ] Filtering
    &lt;ul&gt;
      &lt;li&gt;Throw in a little dehaze/sharpening to taste&lt;/li&gt;
      &lt;li&gt;Maybe even a little grain if that's part of your feel&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;[ ] Cineon =&amp;gt; Alex-X2
    &lt;ul&gt;
      &lt;li&gt;This gets us to a Rec709 output color space, but with those sweet Alexa colors and highlight rolloff&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tools&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&quot;https://www.blackmagicdesign.com/products/davinciresolve/&quot;&gt;Da Vinci Resolve&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Awesome color grading software that is offered at an unfairly competitive price. A lot of features that you won't even know are there, hidden behind features which you will fight to get it to do what you want.&lt;/p&gt;
&lt;p&gt;Added a lot more editing and sound mixing tools recently, trying to become the only software you ever need to be in for a large domain of video projects.&lt;/p&gt;
&lt;p&gt;The addition of the OFX filters has really added in a lot of those good final look features that were missing and you needed to add after before. I'm personally in the middle of developing a very serious &lt;i&gt;thing&lt;/i&gt; for the Dehaze filter.&lt;/p&gt;
&lt;h4&gt;Premiere&lt;/h4&gt;
&lt;p&gt;The Lumetri Color tools inside of premiere have gotten a lot better in recent updates. The controls are fast and flexible and can get a lot of good work done quickly, they just have hard limits where the stop working.
  Secondary grades can get to be more trouble than they're worth very quickly.&lt;/p&gt;
&lt;h2&gt;Good Resources&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&quot;https://cameramanben.github.io/LUTCalc/&quot;&gt;LUTCalc&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This page is amazing! Let's you create custom color space transformation LUTs for just about any camera.&lt;/p&gt;
&lt;p&gt;This is the basis of my workflow shooting with the FS700 and Odyssey 7Q. I come out of the camera is S-Log2 exposed about a stop over. Then I make a LUT on this site that takes out the stop and flips over Alexa X-2 output. This is how I one light and quick color correct things.&lt;/p&gt;
&lt;p&gt;Has links to a lot of other great technical resources if you want to read white papers and get down into the nitty gritty of color science.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://www.provideocoalition.com/aadams/&quot;&gt;Art Adams' Blog&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;He's this cool camera-man/blogger guy who works &lt;b&gt;ALOT&lt;/b&gt;. He does a really good job of explaining the technical software aspects of creating a look.&lt;/p&gt;
&lt;p&gt;He's the one who turned me on to LUTCalc and incorporating that into a on-set/one-light workflow. Definitely read through his stuff for more information.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://www.amazon.com/Print-Ansel-Adams-Photography/dp/0821221876&quot;&gt;The Print - Ansel Adams&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ansel Adams is one of the pioneers of photography as an art form. His work is breathtaking and the tools he had available were unbelievably shitty compared to what we have available today.&lt;/p&gt;
&lt;p&gt;He did this really awesome book series where he talks a lot about his technical process. This book talks about his work in the darkroom, which is very much related to color grading today. This was unbelievably insightful about what it is you are actually trying to accomplish when you go in to produce a final image.&lt;/p&gt;
&lt;p&gt;Talks a lot about exposure and how you're attempting to recreate a facsimile of something you actually witnessed and how the creative use of a limited dynamic range can be a metaphor for the emotion behind an experience beyond what actually occured.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://www.fxphd.com/&quot;&gt;fxphd&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;That website we always took classes from together. They've got some really good color grading stuff on here, it just costs money.&lt;/p&gt;
&lt;p&gt;They changed their pricing model pretty recently, so I think if you pay the subscription fee you can look at all the old courses they have.&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Jan 2018 00:48:00 -0800</pubDate>
        <link>https://ennuiocclusion.github.io/2018/01/04/Notes-On-Color-Grading.html</link>
        <guid isPermaLink="true">https://ennuiocclusion.github.io/2018/01/04/Notes-On-Color-Grading.html</guid>
        
        <category>color-grading</category>
        
        <category>editing</category>
        
        <category>film</category>
        
        
      </item>
    
      <item>
        <title>Beginner's Guide to Atoms in Clojure</title>
        <description>&lt;p&gt;State is the data which lies outside the scope of a single function and is antithetical to the entire being of functional programming. State management is a tricky topic and mutable state is probably the most common source of run-time bugs in programs. Some of the most difficult tasks in computing are centered around the delicate manipulation of large state-machines like OpenGL. This is why Nvidia has such a thriving business of Game-Ready™ drivers.&lt;/p&gt;
&lt;p&gt;Clojure's answer to managing mutable state and remaining a functional language is just to remove mutability entirely. Everything is immutable! All variables will always return the same value.&lt;/p&gt;
&lt;p&gt;How is anything ever done if nothing ever changes? How does a user interact with your program and change the variables controlling what happens?&lt;/p&gt;
&lt;p&gt;Software Transactional Memory! We use functions called atoms as little data-stores which deal with that god-awful state for us.&lt;/p&gt;
&lt;p&gt;We define atoms like so:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojure&quot;&gt;
(def my-memory-hole (atom {:text &amp;quot;Hello there!&amp;quot;}))
&lt;/pre&gt;
&lt;pre class=&quot;example&quot;&gt;
#&amp;#39;user/my-memory-hole
&lt;/pre&gt;
&lt;p&gt;We can then get the contents of that atom by calling the deref function. We are going to do this so often that the Clojure language has the reader macro of &lt;code&gt;@&lt;/code&gt; assigned to calling this function.&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojure&quot;&gt;
@my-memory-hole
&lt;/pre&gt;
&lt;pre class=&quot;example&quot;&gt;
| :text | Hello there! |
&lt;/pre&gt;
&lt;p&gt;If we want to modify the atom we can either wipe the whole thing out with reset:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojure&quot;&gt;
(reset! my-memory-hole {:text &amp;quot;Hey sexy&amp;quot;})
&lt;/pre&gt;
&lt;pre class=&quot;example&quot;&gt;
| :text | Hey sexy |
&lt;/pre&gt;
&lt;p&gt;Or we can modify the atom with a call to swap and pass in a function which takes in the previous value of the atom as its only argument:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojure&quot;&gt;
(swap! my-memory-hole #(assoc % :text (str (:text %) &amp;quot; friendo!&amp;quot;)))
&lt;/pre&gt;
&lt;pre class=&quot;example&quot;&gt;
| :text | Hey sexy friendo! |
&lt;/pre&gt;
&lt;p&gt;And that's pretty much all you need to know to get going with atoms and mutable state. What's really amazing is how little you actually need to directly access atoms. For a game-engine environment the atom only needs to be read once at the start of every frame and written once at the end. All other manipulation of data can be handled through function threading, meaning you've removed state from all your actual business logic.&lt;/p&gt;
&lt;p&gt;More on these threading macros to come!&lt;/p&gt;
&lt;p&gt;-&amp;gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Jan 2018 22:42:00 -0800</pubDate>
        <link>https://ennuiocclusion.github.io/2018/01/03/beginners-guide-to-atoms-in-clojure.html</link>
        <guid isPermaLink="true">https://ennuiocclusion.github.io/2018/01/03/beginners-guide-to-atoms-in-clojure.html</guid>
        
        <category>lisp</category>
        
        <category>clojure</category>
        
        
      </item>
    
      <item>
        <title>Lisp VR with ClojureScript and A-Frame</title>
        <description>&lt;h1&gt;Fun-ctional Programming&lt;/h1&gt;
&lt;p&gt;Functional programming is a fantastic paradigm that I feel lacks a proper explanation for what makes it so fantastic. Most explanations for it begin very math heavy in the origins of lambda calculus. While I do think lambda calculus is one of the best ideas humanity has ever put forth, it is also lacking an elegant layman's explanation. That will have to be a topic for another post.&lt;/p&gt;
&lt;p&gt;For now I want to skip any introduction and just show how you can build and interact with virtual environments in a new way using ClojureScript. The final result of this project will be a basic template for starting a project that uses figwheel to serve and hot-swap ClojureScript code describing an experience which is then displayed in the browser.&lt;/p&gt;
&lt;p&gt;I'll document the process and changes to the code along the way.&lt;/p&gt;
&lt;h1&gt;Getting Started&lt;/h1&gt;
&lt;p&gt;The first thing you're going to need to do is ensure you have Leiningen installed. This is the wonderful Clojure project manager, task runner, build manager and dependency installer all wrapped into one simple tool.&lt;/p&gt;
&lt;p&gt;If you don't have it installed, follow the instructions from &lt;a href=&quot;https://leiningen.org/&quot;&gt;leiningen.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next we create a new project. Navigate a terminal to the directory where you want your project to live then enter:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;bash&quot;&gt;
lein new figwheel aframe-clojurescript-template -- --reagent
&lt;/pre&gt;
&lt;p&gt;This tells Leiningen to make a new project based off figwheel with reagent set up.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bhauman/lein-figwheel&quot;&gt;Figwheel&lt;/a&gt; is the insanely intuitive build tool that hot loads your ClojureScript code. As we work on our code and save it, the pieces of code which have changed will be compiled and sent to our browser where they will automatically be updated and the page will show our changes without us taking any action.&lt;/p&gt;
&lt;p&gt;If we are clever in how we work, this reloading won't alter any of the information in the browser about how we have altered the environment from within the browser. I am referring here to the idea of state. If we wrap all of our state in atoms, we have one convenient storage container for all the user-input we need to evaluate to create our scene at any point in time.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/react&quot;&gt;React&lt;/a&gt; is a very popular front-end framework developed by Facebook which handles state in an almost identical manner. It uses pure Javascript to do some very neat things and manipulate a webpage's &lt;a href=&quot;https://en.wikipedia.org/wiki/Document_Object_Model&quot;&gt;DOM&lt;/a&gt; to create user interfaces and reflect a changing state.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/reagent-project/reagent&quot;&gt;Reagent&lt;/a&gt; is a light-weight ClojureScript interface to use React. It allows you to handle state with atoms, use all the features lisp which you love, and have all your modifications reflected elegantly on the page by React.&lt;/p&gt;
&lt;p&gt;We can test to make sure that the set builds and runs by starting figwheel as follows:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;bash&quot;&gt;
lein figwheel
&lt;/pre&gt;
&lt;p&gt;Now we've got all the pieces we need to start writing some code!&lt;/p&gt;
&lt;h1&gt;Messing with code&lt;/h1&gt;
&lt;p&gt;The first place we need to begin is in &lt;code&gt;/resources/public/index.html&lt;/code&gt;. This is the main HTML page that gets loaded by the browser, which then loads in our ClojureScript code. The only modification we need to make is to add in a link to the A-Frame source code in between the head tags like so:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;html&quot;&gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt;
    &amp;lt;link href=&amp;quot;css/style.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot;&amp;gt;
    &amp;lt;link rel=&amp;quot;icon&amp;quot; href=&amp;quot;https://clojurescript.org/images/cljs-logo-icon-32.png&amp;quot;&amp;gt;
    &amp;lt;script src=&amp;quot;https://aframe.io/releases/0.7.0/aframe.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Next we get into our main ClojureScript file. It is located at src/aframe_clojurescript_temple/core.cljs. Let's work out what should be in there from top to bottom.&lt;/p&gt;
&lt;p&gt;First we need to declare our namespace and list our dependencies.&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojurescript&quot;&gt;
(ns aframe-clojurescript-template.core
  (:require [reagent.core :as reagent :refer [atom]]))
&lt;/pre&gt;
&lt;p&gt;Then we enable printing to the console for logging purposes.&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojurescript&quot;&gt;
(enable-console-print!)
&lt;/pre&gt;
&lt;p&gt;Next we declare our state holding atom. This will persist data between restarts and will control what is in the virtual environment.&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojurescript&quot;&gt;
(defonce app-state (atom {:scene {}}))
&lt;/pre&gt;
&lt;p&gt;Let's define our reagent template, which will be rendered into our HTML. This should just read our scene off the app-state.&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojurescript&quot;&gt;
(defn reagent-template []
  [:div
   (:scene @app-state)])
&lt;/pre&gt;
&lt;p&gt;Now we can define what we want our scene to look like. This should be a vector of A-Frame elements building up a scene. To begin with let's make a scene with a ball sitting on a flat plane.&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojurescript&quot;&gt;
(defn scene-template []
  [:a-scene
   [:a-sphere {:position &amp;quot;0 1.25 -5&amp;quot;
               :radius &amp;quot;1.25&amp;quot;
               :color &amp;quot;#EF2D5E&amp;quot;}]
   [:a-plane {:position &amp;quot;0 0 -4&amp;quot;
              :rotation &amp;quot;-90 0 0&amp;quot;
              :width &amp;quot;4&amp;quot;
              :height &amp;quot;4&amp;quot;
              :color &amp;quot;#7BC8A4&amp;quot;}]])
&lt;/pre&gt;
&lt;p&gt;We need to place this scene in our state.&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojurescript&quot;&gt;
(swap! app-state #(asooc % :scene scene-template))
&lt;/pre&gt;
&lt;p&gt;And finally we tell reagent to render our template into the &lt;code&gt;app&lt;/code&gt; element of the webpage.&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;clojurescript&quot;&gt;
(reagent/render-component [reagent-template]
                          (. js/document (getElementById &amp;quot;app&amp;quot;)))
                          
&lt;/pre&gt;
&lt;p&gt;Just like that we should have our basic scene.&lt;/p&gt;
&lt;h1&gt;GitHub Repository&lt;/h1&gt;
&lt;p&gt;Complete code available at &lt;a href=&quot;https://github.com/EnnuiOcclusion/aframe-clojurescript-template&quot;&gt;https://github.com/EnnuiOcclusion/aframe-clojurescript-template&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Dec 2017 13:51:00 -0800</pubDate>
        <link>https://ennuiocclusion.github.io/2017/12/30/lisp-vr-with-clojurescript-and-aframe.html</link>
        <guid isPermaLink="true">https://ennuiocclusion.github.io/2017/12/30/lisp-vr-with-clojurescript-and-aframe.html</guid>
        
        <category>lisp</category>
        
        <category>vr</category>
        
        <category>clojurescript</category>
        
        <category>aframe</category>
        
        
      </item>
    
      <item>
        <title>An Org to Jekyll Tour of GitHub</title>
        <description>&lt;h1&gt;Learning From Others&lt;/h1&gt;
&lt;p&gt;In the last post I got a first look at what's required to get org-mode documents exported for Markdown that Jekyll likes. It's definitely work that's prime for some automation and would be a good learning experience for either Emacs-Lisp or Ruby to parse the documents correctly. Before I dive headfirst into doing this on my own I want to take a tour of other solutions people have come up with on GitHub and document their approaches.&lt;/p&gt;
&lt;p&gt;Let's ride.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/eggcaker/jekyll-org&quot;&gt;eggcaker/jekyll-org&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;This is a ruby script that gets run by Jekyll to convert the org files in the &lt;code&gt;_posts&lt;/code&gt; folder to get converted directly by Jekyll. Seems very straight forward to set up, all you need to do is include the gem in &lt;code&gt;_config.yml&lt;/code&gt; and &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Features&lt;/h3&gt;
&lt;p&gt;You can now use standard org-mode parameters to get all the front matter for your posts, for example:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;org&quot;&gt;
#+TITLE: An Org to Jekyll Tour of Github
#+LAYOUT: post
#+TAGS: meta org-mode jekyll
&lt;/pre&gt;
&lt;p&gt;You also get proper code syntax highlighting and liquid templating as long as you include this in your header:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;org&quot;&gt;
#+liquid: enabled
&lt;/pre&gt;
&lt;h3&gt;Source Code&lt;/h3&gt;
&lt;p&gt;Shockingly simple. Most of the action takes place in &lt;a href=&quot;https://github.com/eggcaker/jekyll-org/blob/master/lib/jekyll-org.rb&quot;&gt;/lib/jekyll-org.rb&lt;/a&gt;. It declares a new &lt;code&gt;Converter&lt;/code&gt; subclass called &lt;code&gt;OrgConverter&lt;/code&gt; then reads in any &lt;code&gt;.org&lt;/code&gt; files and exports &lt;code&gt;.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For the actual conversion logic it makes extensive use of the &lt;a href=&quot;https://github.com/bdewey/org-ruby&quot;&gt;org-ruby&lt;/a&gt; parser to extract html from the org-mode document. There's a little logic for the front matter conversion and a switch for the liquid_enabled tag. What's really interesting to me is this little snippet for reading if a date was embedded in Jekyll format into the filename:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;ruby&quot;&gt;
DATELESS_FILENAME_MATCHER = %r!^(?:.+/)*(.*)(\.[^.]+)$!
DATE_FILENAME_MATCHER = %r!^(?:.+/)*(\d{4}-\d{2}-\d{2})-(.*)(\.[^.]+)$!
# set default slug
# copy and edit frmo jekyll:lib/jekyll/document.rb -- populate_title
if relative_path =~ DATE_FILENAME_MATCHER
  date, slug, ext = Regexp.last_match.captures
  modify_date(date)
elsif relative_path =~ DATELESS_FILENAME_MATCHER
  slug, ext = Regexp.last_match.captures
end
&lt;/pre&gt;
&lt;p&gt;That is one hell of a regex I just don't see myself ever sitting down to write. There is a beauty to turn it into a one-liner, but it's a problem I would definitely hand over to using split() or something similar on. Regular expressions are definitely still a from of dark-magic to me.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Seems like a well formed piece of software that solves all of the problems I was looking at.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;ardumont/org2jekyll&quot;&gt;https://github.com/ardumont/org2jekyll&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;This project uses Emacs-Lisp and the org-mode publishing system the parse through your files in an &lt;code&gt;_org&lt;/code&gt; directory, then output HTML to the &lt;code&gt;_posts&lt;/code&gt; directory which will get picked up by Jekyll.&lt;/p&gt;
&lt;p&gt;There's a lot more configuration required, but from that you can get more customization out of your configuration.&lt;/p&gt;
&lt;h3&gt;Features&lt;/h3&gt;
&lt;p&gt;We also get the nice auto-conversion of org-mode properties to the necessary YAML for the front matter. A task which the author is quite proud of accomplishing with only elisp.&lt;/p&gt;
&lt;p&gt;It looks like there are some nice options for templating. There is also an org2jekyll minor mode which introduces some nice shortcuts for things such as opening a new draft template and publishing all posts.&lt;/p&gt;
&lt;h3&gt;Source Code&lt;/h3&gt;
&lt;p&gt;Most of the action here is in &lt;a href=&quot;https://github.com/ardumont/org2jekyll/blob/master/org2jekyll.el&quot;&gt;org2jekyll.el&lt;/a&gt;. Taking a look around it seems like it takes a lot of elisp to get the basic logic of creating the front matter headers. There are a lot of cool convenience function though like:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;emacs-lisp&quot;&gt;
(defun org2jekyll-init-current-buffer ()
  &amp;quot;Given an existing buffer, add the needed metadata to make it a post or page.&amp;quot;
&lt;/pre&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Seems to get similar results to jekyll-org. It's interesting how you can get such similar results, but take a completely different path to get there. It does also seem quite nice that you get extra features by integrating with the editor, instead of the compiler.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/bmaland/happyblogger&quot;&gt;bmaland/happyblogger&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;This project takes a similar setup to how I probably would have ended up hacking a solution together. Essentially you write your posts in org-mode, use the export option from org-mode to put HTML posts in your &lt;code&gt;_posts&lt;/code&gt; directory, then you run a &lt;code&gt;pre-process.rb&lt;/code&gt; script which makes the HTML into something that Jekyll can parse.&lt;/p&gt;
&lt;h3&gt;Features&lt;/h3&gt;
&lt;p&gt;Works very simple and well as long as you format everything the way that the author likes to format his posts.&lt;/p&gt;
&lt;h3&gt;Source Code&lt;/h3&gt;
&lt;p&gt;Most everything here is happening in the preprocessing script at &lt;a href=&quot;https://github.com/bmaland/happyblogger/blob/master/pre-process.rb&quot;&gt;pre-process.rb&lt;/a&gt;. It's a pretty straight forward ruby script that rips out all the metadata then inserts it as YAML for the front matter.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Nice to see someone was headed in the direction I was, but it becomes clear pretty quick why this isn't necessarily the best solution. The author himself admits that the solution, &amp;#8220;can be generalized quite a bit.&amp;#8221;&lt;/p&gt;
&lt;h1&gt;Overall Thoughts&lt;/h1&gt;
&lt;p&gt;I'm going to go with the jekyll-org solution for now. I like the simplicity of its configuration and use. It doesn't bother me the we're switching to Ruby from Emacs for this task, as we're already using Ruby extensively for Jekyll. We're just moving the task of preprocessing onto the compiler for these posts.&lt;/p&gt;
&lt;p&gt;I'm glad I took the time to poke around a bit and document what I found. I want to make a habit of doing source code reviews to find and steal good ideas from others.&lt;/p&gt;
&lt;p&gt;This was also a nice way to get some good exposure to Ruby code in production. The module system seems like a very nice way of extending functionality on existing code bases.&lt;/p&gt;
&lt;h1&gt;Next Steps&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Get this installed and running.&lt;/li&gt;
  &lt;li&gt;Start writing blog posts about interesting things I want to work on instead of going on about the intricacies of parsing YAML out of org-mode.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 27 Dec 2017 18:38:15 -0800</pubDate>
        <link>https://ennuiocclusion.github.io/2017/12/27/an-org-to-jekyll-tour-of-github.html</link>
        <guid isPermaLink="true">https://ennuiocclusion.github.io/2017/12/27/an-org-to-jekyll-tour-of-github.html</guid>
        
        <category>meta</category>
        
        <category>org-mode</category>
        
        <category>jekyll</category>
        
        
      </item>
    
      <item>
        <title>Org-Mode for Jekyll</title>
        <description>&lt;h1&gt;Org-Mode Structure&lt;/h1&gt;
&lt;p&gt;I love using org-mode to structure ideas into documentation. I've just started this blog using Jekyll, but I'd love for the posts to be written in org-mode rather the straight markup. I've got some plans for the future about how I might want to swap out the static-site generator and also do a bit of literate programming. Org-mode really shines in these tasks, so let's get set up for success now.&lt;/p&gt;
&lt;p&gt;This post is a test to understand how exactly I could go about doing that. Let's see how it goes.&lt;/p&gt;
&lt;h1&gt;Testing&lt;/h1&gt;
&lt;p&gt;In order to test the site I need to build it. The code to do so looks a little like follows from the project root-directory.&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;bash&quot;&gt;
bundle exec jekyll build
&lt;/pre&gt;
&lt;h1&gt;First Try - Do Nothing&lt;/h1&gt;
&lt;p&gt;My first attempt at this is just to see if it might secretly be a default feature of Jekyll, a bit like how you can just stick org files of Github and have it automatically convert to Markdown. This does not work. Putting this file in the &lt;code&gt;_posts&lt;/code&gt; folder does make it show up, but clicking the link begins downloading the actual org file. No Bueno.&lt;/p&gt;
&lt;h1&gt;Second Try - Using org-mode export to Markdown&lt;/h1&gt;
&lt;p&gt;Using the org-export function to markdown, which in spacemacs is mapped to ~, e e~ you can export directly to markdown. This get's read by Jekyll as markdown, but gives browser default html, with none of our links or static site goodness. We must go deeper.&lt;/p&gt;
&lt;h1&gt;Third Try - Once More With Feeling&lt;/h1&gt;
&lt;p&gt;Turns out the markdown export can work, we just need to coax the file into something Jekyll wants to play with. There's a few tasks we need to accomplish, getting rid of the table of contents on export, introducing the front matter for the post, and changing the exported file extension.&lt;/p&gt;
&lt;h2&gt;Removing the Table of Contents&lt;/h2&gt;
&lt;p&gt;This one's pretty simple and just consists of adding this line to the head of your org file.&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;org&quot;&gt;
#+OPTIONS: toc:nil
&lt;/pre&gt;
&lt;h2&gt;Introducing Front Matter&lt;/h2&gt;
&lt;p&gt;This is all the metadata that Jekyll uses to title and format your blog post. It needs to be repeated verbatim at the front of the markdown document. We can use Org's src block functionality to do this with something this:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;org&quot;&gt;
#+BEGIN_SRC markdown
---
layout: post
title: Org-Mode for Jekyll
date:   2017-12-27 18:38:15 -0800
categories: meta
---
#+END_SRC
&lt;/pre&gt;
&lt;p&gt;One of the very nice things about org-mode is how easy it is to pop in and configure these blocks for literate programming, all you need to do is hit &lt;code&gt;&amp;lt; s TAB&lt;/code&gt; then enter the name of the language for that source block. In spacemacs you can then hit ~, '~ to pop open a new buffer that's in the major mode for the language of that source block. Hit ~, c~ to save your changes back into your original buffer.&lt;/p&gt;
&lt;p&gt;You're good to export with ~, e e m o~. &amp;lt;sup&amp;gt;You don't actually have to remember these commands they pop up in the mini-buffer as you start typing.&amp;lt;/sup&amp;gt;&lt;/p&gt;
&lt;p&gt;There is just one last problem with the front matter that needs to be fixed. There's about four spaces in front of each line from the exporter, you need to delete these for them to be properly parsed by Jekyll.&lt;/p&gt;
&lt;h2&gt;File Extension&lt;/h2&gt;
&lt;p&gt;This one got me tripped up for a little longer than I'd like to admit.  Jekyll apparently looks for files with a full &lt;code&gt;.markdown&lt;/code&gt; extension. If you have just the &lt;code&gt;.md&lt;/code&gt; extensions that comes out of the org-export you will get a post takes web brutalism to heart. So rename and you're good to go. Now Jekyll will process this file as if you'd written it in regular Markdown and you're ready to keep on cooking.&lt;/p&gt;
&lt;h1&gt;Next Steps&lt;/h1&gt;
&lt;p&gt;Now that the basic idea has proven feasible and I know the basic tasks that need to be accomplished, let's build some tools to automate all this in a future post.&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Dec 2017 18:38:15 -0800</pubDate>
        <link>https://ennuiocclusion.github.io/2017/12/27/org-mode-export-test.html</link>
        <guid isPermaLink="true">https://ennuiocclusion.github.io/2017/12/27/org-mode-export-test.html</guid>
        
        <category>meta</category>
        
        <category>org-mode</category>
        
        <category>jekyll</category>
        
        
      </item>
    
      <item>
        <title>Front Matter</title>
        <description>&lt;h1&gt;Hello,&lt;/h1&gt;
&lt;p&gt;My name is Peter Morris. I've worked for a while as the Director of Post-Production for a small creative agency in Orlando. That's a made up job title that means I wore a lot of hats. I've worked in filming, lighting, editing, coloring, IT, sound design, VR, AR, pipeline management, and anything else that needed to get done to deliver a finished project.&lt;/p&gt;
&lt;p&gt;I'm at a bit of a turning point in my life and while I've enjoyed everything I've worked in so far I've found I have a real passion for programming. Programming is really the art of attempting to understand abstractions. It is the attempt to break apart real world problems into manageable enough pieces that you can map known abstractions over them.&lt;/p&gt;
&lt;p&gt;I want to take the knowledge that I've acquired about traditional crafts like cinematography and sound design and build better tools for creating the new interactive fictions that are becoming possible. The fact that Creative Technology is such a booming field is incredible, and I want to join in the conversation.&lt;/p&gt;
&lt;p&gt;I've been working hard over the past several months to bring my programming skills from active hobbyist with some pipeline and application hacking experience up to a much more productive level. I finally feel I'm at the level where I can start publishing work and getting input from others. This blog will document working to continually improve at this craft and hopefully be a point of contact to begin a discussion.&lt;/p&gt;
&lt;p&gt;My efforts right now are guided largely towards interactive experience scripting. I want to use all these new technologies using an expressive and robust langauge that makes working easier. Lisp is the best candidate I've found for this by far, so get ready for a lot of Clojure.&lt;/p&gt;
&lt;p&gt;I will also be working on continually improving this site itself, so there will be quite a few meta tagged posts about how best to use Jekyll with Emacs.&lt;/p&gt;
&lt;p&gt;Thanks for taking the time to read this far. Let's make some cool things together.&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Dec 2017 08:00:00 -0800</pubDate>
        <link>https://ennuiocclusion.github.io/2017/12/27/front-matter.html</link>
        <guid isPermaLink="true">https://ennuiocclusion.github.io/2017/12/27/front-matter.html</guid>
        
        <category>meta</category>
        
        
      </item>
    
  </channel>
</rss>
