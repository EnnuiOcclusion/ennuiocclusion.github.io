<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://www.ennuiocclusion.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.ennuiocclusion.github.io/" rel="alternate" type="text/html" /><updated>2017-12-30T13:22:13-08:00</updated><id>https://www.ennuiocclusion.github.io/</id><title type="html">Ennui Occlusion</title><subtitle>Exploring the things that interest me. All input and consideration is greatly appreciated.</subtitle><entry><title type="html">An Org to Jekyll Tour of GitHub</title><link href="https://www.ennuiocclusion.github.io/2017/12/27/an-org-to-jekyll-tour-of-github.html" rel="alternate" type="text/html" title="An Org to Jekyll Tour of GitHub" /><published>2017-12-27T18:38:15-08:00</published><updated>2017-12-27T18:38:15-08:00</updated><id>https://www.ennuiocclusion.github.io/2017/12/27/an-org-to-jekyll-tour-of-github</id><content type="html" xml:base="https://www.ennuiocclusion.github.io/2017/12/27/an-org-to-jekyll-tour-of-github.html">&lt;h1&gt;Learning From Others&lt;/h1&gt;
&lt;p&gt;In the last post I got a first look at what's required to get org-mode documents exported for Markdown that Jekyll likes. It's definitely work that's prime for some automation and would be a good learning experience for either Emacs-Lisp or Ruby to parse the documents correctly. Before I dive headfirst into doing this on my own I want to take a tour of other solutions people have come up with on GitHub and document their approaches.&lt;/p&gt;
&lt;p&gt;Let's ride.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/eggcaker/jekyll-org&quot;&gt;eggcaker/jekyll-org&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;This is a ruby script that gets run by Jekyll to convert the org files in the &lt;code&gt;_posts&lt;/code&gt; folder to get converted directly by Jekyll. Seems very straight forward to set up, all you need to do is include the gem in &lt;code&gt;_config.yml&lt;/code&gt; and &lt;code&gt;Gemfile&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Features&lt;/h3&gt;
&lt;p&gt;You can now use standard org-mode parameters to get all the front matter for your posts, for example:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;org&quot;&gt;
#+TITLE: An Org to Jekyll Tour of Github
#+LAYOUT: post
#+TAGS: meta org-mode jekyll
&lt;/pre&gt;
&lt;p&gt;You also get proper code syntax highlighting and liquid templating as long as you include this in your header:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;org&quot;&gt;
#+liquid: enabled
&lt;/pre&gt;
&lt;h3&gt;Source Code&lt;/h3&gt;
&lt;p&gt;Shockingly simple. Most of the action takes place in &lt;a href=&quot;https://github.com/eggcaker/jekyll-org/blob/master/lib/jekyll-org.rb&quot;&gt;/lib/jekyll-org.rb&lt;/a&gt;. It declares a new &lt;code&gt;Converter&lt;/code&gt; subclass called &lt;code&gt;OrgConverter&lt;/code&gt; then reads in any &lt;code&gt;.org&lt;/code&gt; files and exports &lt;code&gt;.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For the actual conversion logic it makes extensive use of the &lt;a href=&quot;https://github.com/bdewey/org-ruby&quot;&gt;org-ruby&lt;/a&gt; parser to extract html from the org-mode document. There's a little logic for the front matter conversion and a switch for the liquid_enabled tag. What's really interesting to me is this little snippet for reading if a date was embedded in Jekyll format into the filename:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;ruby&quot;&gt;
DATELESS_FILENAME_MATCHER = %r!^(?:.+/)*(.*)(\.[^.]+)$!
DATE_FILENAME_MATCHER = %r!^(?:.+/)*(\d{4}-\d{2}-\d{2})-(.*)(\.[^.]+)$!
# set default slug
# copy and edit frmo jekyll:lib/jekyll/document.rb -- populate_title
if relative_path =~ DATE_FILENAME_MATCHER
  date, slug, ext = Regexp.last_match.captures
  modify_date(date)
elsif relative_path =~ DATELESS_FILENAME_MATCHER
  slug, ext = Regexp.last_match.captures
end
&lt;/pre&gt;
&lt;p&gt;That is one hell of a regex I just don't see myself ever sitting down to write. There is a beauty to turn it into a one-liner, but it's a problem I would definitely hand over to using split() or something similar on. Regular expressions are definitely still a from of dark-magic to me.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Seems like a well formed piece of software that solves all of the problems I was looking at.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;ardumont/org2jekyll&quot;&gt;https://github.com/ardumont/org2jekyll&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;This project uses Emacs-Lisp and the org-mode publishing system the parse through your files in an &lt;code&gt;_org&lt;/code&gt; directory, then output HTML to the &lt;code&gt;_posts&lt;/code&gt; directory which will get picked up by Jekyll.&lt;/p&gt;
&lt;p&gt;There's a lot more configuration required, but from that you can get more customization out of your configuration.&lt;/p&gt;
&lt;h3&gt;Features&lt;/h3&gt;
&lt;p&gt;We also get the nice auto-conversion of org-mode properties to the necessary YAML for the front matter. A task which the author is quite proud of accomplishing with only elisp.&lt;/p&gt;
&lt;p&gt;It looks like there are some nice options for templating. There is also an org2jekyll minor mode which introduces some nice shortcuts for things such as opening a new draft template and publishing all posts.&lt;/p&gt;
&lt;h3&gt;Source Code&lt;/h3&gt;
&lt;p&gt;Most of the action here is in &lt;a href=&quot;https://github.com/ardumont/org2jekyll/blob/master/org2jekyll.el&quot;&gt;org2jekyll.el&lt;/a&gt;. Taking a look around it seems like it takes a lot of elisp to get the basic logic of creating the front matter headers. There are a lot of cool convenience function though like:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;emacs-lisp&quot;&gt;
(defun org2jekyll-init-current-buffer ()
  &amp;quot;Given an existing buffer, add the needed metadata to make it a post or page.&amp;quot;
&lt;/pre&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Seems to get similar results to jekyll-org. It's interesting how you can get such similar results, but take a completely different path to get there. It does also seem quite nice that you get extra features by integrating with the editor, instead of the compiler.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/bmaland/happyblogger&quot;&gt;bmaland/happyblogger&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;This project takes a similar setup to how I probably would have ended up hacking a solution together. Essentially you write your posts in org-mode, use the export option from org-mode to put HTML posts in your &lt;code&gt;_posts&lt;/code&gt; directory, then you run a &lt;code&gt;pre-process.rb&lt;/code&gt; script which makes the HTML into something that Jekyll can parse.&lt;/p&gt;
&lt;h3&gt;Features&lt;/h3&gt;
&lt;p&gt;Works very simple and well as long as you format everything the way that the author likes to format his posts.&lt;/p&gt;
&lt;h3&gt;Source Code&lt;/h3&gt;
&lt;p&gt;Most everything here is happening in the preprocessing script at &lt;a href=&quot;https://github.com/bmaland/happyblogger/blob/master/pre-process.rb&quot;&gt;pre-process.rb&lt;/a&gt;. It's a pretty straight forward ruby script that rips out all the metadata then inserts it as YAML for the front matter.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Nice to see someone was headed in the direction I was, but it becomes clear pretty quick why this isn't necessarily the best solution. The author himself admits that the solution, &amp;#8220;can be generalized quite a bit.&amp;#8221;&lt;/p&gt;
&lt;h1&gt;Overall Thoughts&lt;/h1&gt;
&lt;p&gt;I'm going to go with the jekyll-org solution for now. I like the simplicity of its configuration and use. It doesn't bother me the we're switching to Ruby from Emacs for this task, as we're already using Ruby extensively for Jekyll. We're just moving the task of preprocessing onto the compiler for these posts.&lt;/p&gt;
&lt;p&gt;I'm glad I took the time to poke around a bit and document what I found. I want to make a habit of doing source code reviews to find and steal good ideas from others.&lt;/p&gt;
&lt;p&gt;This was also a nice way to get some good exposure to Ruby code in production. The module system seems like a very nice way of extending functionality on existing code bases.&lt;/p&gt;
&lt;h1&gt;Next Steps&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Get this installed and running.&lt;/li&gt;
  &lt;li&gt;Start writing blog posts about interesting things I want to work on instead of going on about the intricacies of parsing YAML out of org-mode.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="meta" /><category term="org-mode" /><category term="jekyll" /><summary type="html">Learning From Others In the last post I got a first look at what's required to get org-mode documents exported for Markdown that Jekyll likes. It's definitely work that's prime for some automation and would be a good learning experience for either Emacs-Lisp or Ruby to parse the documents correctly. Before I dive headfirst into doing this on my own I want to take a tour of other solutions people have come up with on GitHub and document their approaches. Let's ride. eggcaker/jekyll-org Overview This is a ruby script that gets run by Jekyll to convert the org files in the _posts folder to get converted directly by Jekyll. Seems very straight forward to set up, all you need to do is include the gem in _config.yml and Gemfile. Features You can now use standard org-mode parameters to get all the front matter for your posts, for example: #+TITLE: An Org to Jekyll Tour of Github #+LAYOUT: post #+TAGS: meta org-mode jekyll You also get proper code syntax highlighting and liquid templating as long as you include this in your header: #+liquid: enabled Source Code Shockingly simple. Most of the action takes place in /lib/jekyll-org.rb. It declares a new Converter subclass called OrgConverter then reads in any .org files and exports .html. For the actual conversion logic it makes extensive use of the org-ruby parser to extract html from the org-mode document. There's a little logic for the front matter conversion and a switch for the liquid_enabled tag. What's really interesting to me is this little snippet for reading if a date was embedded in Jekyll format into the filename: DATELESS_FILENAME_MATCHER = %r!^(?:.+/)*(.*)(\.[^.]+)$! DATE_FILENAME_MATCHER = %r!^(?:.+/)*(\d{4}-\d{2}-\d{2})-(.*)(\.[^.]+)$! # set default slug # copy and edit frmo jekyll:lib/jekyll/document.rb -- populate_title if relative_path =~ DATE_FILENAME_MATCHER date, slug, ext = Regexp.last_match.captures modify_date(date) elsif relative_path =~ DATELESS_FILENAME_MATCHER slug, ext = Regexp.last_match.captures end That is one hell of a regex I just don't see myself ever sitting down to write. There is a beauty to turn it into a one-liner, but it's a problem I would definitely hand over to using split() or something similar on. Regular expressions are definitely still a from of dark-magic to me. Conclusion Seems like a well formed piece of software that solves all of the problems I was looking at. https://github.com/ardumont/org2jekyll Overview This project uses Emacs-Lisp and the org-mode publishing system the parse through your files in an _org directory, then output HTML to the _posts directory which will get picked up by Jekyll. There's a lot more configuration required, but from that you can get more customization out of your configuration. Features We also get the nice auto-conversion of org-mode properties to the necessary YAML for the front matter. A task which the author is quite proud of accomplishing with only elisp. It looks like there are some nice options for templating. There is also an org2jekyll minor mode which introduces some nice shortcuts for things such as opening a new draft template and publishing all posts. Source Code Most of the action here is in org2jekyll.el. Taking a look around it seems like it takes a lot of elisp to get the basic logic of creating the front matter headers. There are a lot of cool convenience function though like: (defun org2jekyll-init-current-buffer () &amp;quot;Given an existing buffer, add the needed metadata to make it a post or page.&amp;quot; Conclusion Seems to get similar results to jekyll-org. It's interesting how you can get such similar results, but take a completely different path to get there. It does also seem quite nice that you get extra features by integrating with the editor, instead of the compiler. bmaland/happyblogger Overview This project takes a similar setup to how I probably would have ended up hacking a solution together. Essentially you write your posts in org-mode, use the export option from org-mode to put HTML posts in your _posts directory, then you run a pre-process.rb script which makes the HTML into something that Jekyll can parse. Features Works very simple and well as long as you format everything the way that the author likes to format his posts. Source Code Most everything here is happening in the preprocessing script at pre-process.rb. It's a pretty straight forward ruby script that rips out all the metadata then inserts it as YAML for the front matter. Conclusion Nice to see someone was headed in the direction I was, but it becomes clear pretty quick why this isn't necessarily the best solution. The author himself admits that the solution, &amp;#8220;can be generalized quite a bit.&amp;#8221; Overall Thoughts I'm going to go with the jekyll-org solution for now. I like the simplicity of its configuration and use. It doesn't bother me the we're switching to Ruby from Emacs for this task, as we're already using Ruby extensively for Jekyll. We're just moving the task of preprocessing onto the compiler for these posts. I'm glad I took the time to poke around a bit and document what I found. I want to make a habit of doing source code reviews to find and steal good ideas from others. This was also a nice way to get some good exposure to Ruby code in production. The module system seems like a very nice way of extending functionality on existing code bases. Next Steps Get this installed and running. Start writing blog posts about interesting things I want to work on instead of going on about the intricacies of parsing YAML out of org-mode.</summary></entry><entry><title type="html">Org-Mode for Jekyll</title><link href="https://www.ennuiocclusion.github.io/2017/12/27/org-mode-export-test.html" rel="alternate" type="text/html" title="Org-Mode for Jekyll" /><published>2017-12-27T18:38:15-08:00</published><updated>2017-12-27T18:38:15-08:00</updated><id>https://www.ennuiocclusion.github.io/2017/12/27/org-mode-export-test</id><content type="html" xml:base="https://www.ennuiocclusion.github.io/2017/12/27/org-mode-export-test.html">&lt;h1&gt;Org-Mode Structure&lt;/h1&gt;
&lt;p&gt;I love using org-mode to structure ideas into documentation. I've just started this blog using Jekyll, but I'd love for the posts to be written in org-mode rather the straight markup. I've got some plans for the future about how I might want to swap out the static-site generator and also do a bit of literate programming. Org-mode really shines in these tasks, so let's get set up for success now.&lt;/p&gt;
&lt;p&gt;This post is a test to understand how exactly I could go about doing that. Let's see how it goes.&lt;/p&gt;
&lt;h1&gt;Testing&lt;/h1&gt;
&lt;p&gt;In order to test the site I need to build it. The code to do so looks a little like follows from the project root-directory.&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;bash&quot;&gt;
bundle exec jekyll build
&lt;/pre&gt;
&lt;h1&gt;First Try - Do Nothing&lt;/h1&gt;
&lt;p&gt;My first attempt at this is just to see if it might secretly be a default feature of Jekyll, a bit like how you can just stick org files of Github and have it automatically convert to Markdown. This does not work. Putting this file in the &lt;code&gt;_posts&lt;/code&gt; folder does make it show up, but clicking the link begins downloading the actual org file. No Bueno.&lt;/p&gt;
&lt;h1&gt;Second Try - Using org-mode export to Markdown&lt;/h1&gt;
&lt;p&gt;Using the org-export function to markdown, which in spacemacs is mapped to ~, e e~ you can export directly to markdown. This get's read by Jekyll as markdown, but gives browser default html, with none of our links or static site goodness. We must go deeper.&lt;/p&gt;
&lt;h1&gt;Third Try - Once More With Feeling&lt;/h1&gt;
&lt;p&gt;Turns out the markdown export can work, we just need to coax the file into something Jekyll wants to play with. There's a few tasks we need to accomplish, getting rid of the table of contents on export, introducing the front matter for the post, and changing the exported file extension.&lt;/p&gt;
&lt;h2&gt;Removing the Table of Contents&lt;/h2&gt;
&lt;p&gt;This one's pretty simple and just consists of adding this line to the head of your org file.&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;org&quot;&gt;
#+OPTIONS: toc:nil
&lt;/pre&gt;
&lt;h2&gt;Introducing Front Matter&lt;/h2&gt;
&lt;p&gt;This is all the metadata that Jekyll uses to title and format your blog post. It needs to be repeated verbatim at the front of the markdown document. We can use Org's src block functionality to do this with something this:&lt;/p&gt;
&lt;pre class=&quot;src&quot; lang=&quot;org&quot;&gt;
#+BEGIN_SRC markdown
---
layout: post
title: Org-Mode for Jekyll
date:   2017-12-27 18:38:15 -0800
categories: meta
---
#+END_SRC
&lt;/pre&gt;
&lt;p&gt;One of the very nice things about org-mode is how easy it is to pop in and configure these blocks for literate programming, all you need to do is hit &lt;code&gt;&amp;lt; s TAB&lt;/code&gt; then enter the name of the language for that source block. In spacemacs you can then hit ~, '~ to pop open a new buffer that's in the major mode for the language of that source block. Hit ~, c~ to save your changes back into your original buffer.&lt;/p&gt;
&lt;p&gt;You're good to export with ~, e e m o~. &amp;lt;sup&amp;gt;You don't actually have to remember these commands they pop up in the mini-buffer as you start typing.&amp;lt;/sup&amp;gt;&lt;/p&gt;
&lt;p&gt;There is just one last problem with the front matter that needs to be fixed. There's about four spaces in front of each line from the exporter, you need to delete these for them to be properly parsed by Jekyll.&lt;/p&gt;
&lt;h2&gt;File Extension&lt;/h2&gt;
&lt;p&gt;This one got me tripped up for a little longer than I'd like to admit.  Jekyll apparently looks for files with a full &lt;code&gt;.markdown&lt;/code&gt; extension. If you have just the &lt;code&gt;.md&lt;/code&gt; extensions that comes out of the org-export you will get a post takes web brutalism to heart. So rename and you're good to go. Now Jekyll will process this file as if you'd written it in regular Markdown and you're ready to keep on cooking.&lt;/p&gt;
&lt;h1&gt;Next Steps&lt;/h1&gt;
&lt;p&gt;Now that the basic idea has proven feasible and I know the basic tasks that need to be accomplished, let's build some tools to automate all this in a future post.&lt;/p&gt;</content><author><name></name></author><category term="meta" /><category term="org-mode" /><category term="jekyll" /><summary type="html">Org-Mode Structure I love using org-mode to structure ideas into documentation. I've just started this blog using Jekyll, but I'd love for the posts to be written in org-mode rather the straight markup. I've got some plans for the future about how I might want to swap out the static-site generator and also do a bit of literate programming. Org-mode really shines in these tasks, so let's get set up for success now. This post is a test to understand how exactly I could go about doing that. Let's see how it goes. Testing In order to test the site I need to build it. The code to do so looks a little like follows from the project root-directory. bundle exec jekyll build First Try - Do Nothing My first attempt at this is just to see if it might secretly be a default feature of Jekyll, a bit like how you can just stick org files of Github and have it automatically convert to Markdown. This does not work. Putting this file in the _posts folder does make it show up, but clicking the link begins downloading the actual org file. No Bueno. Second Try - Using org-mode export to Markdown Using the org-export function to markdown, which in spacemacs is mapped to ~, e e~ you can export directly to markdown. This get's read by Jekyll as markdown, but gives browser default html, with none of our links or static site goodness. We must go deeper. Third Try - Once More With Feeling Turns out the markdown export can work, we just need to coax the file into something Jekyll wants to play with. There's a few tasks we need to accomplish, getting rid of the table of contents on export, introducing the front matter for the post, and changing the exported file extension. Removing the Table of Contents This one's pretty simple and just consists of adding this line to the head of your org file. #+OPTIONS: toc:nil Introducing Front Matter This is all the metadata that Jekyll uses to title and format your blog post. It needs to be repeated verbatim at the front of the markdown document. We can use Org's src block functionality to do this with something this: #+BEGIN_SRC markdown --- layout: post title: Org-Mode for Jekyll date: 2017-12-27 18:38:15 -0800 categories: meta --- #+END_SRC One of the very nice things about org-mode is how easy it is to pop in and configure these blocks for literate programming, all you need to do is hit &amp;lt; s TAB then enter the name of the language for that source block. In spacemacs you can then hit ~, '~ to pop open a new buffer that's in the major mode for the language of that source block. Hit ~, c~ to save your changes back into your original buffer. You're good to export with ~, e e m o~. &amp;lt;sup&amp;gt;You don't actually have to remember these commands they pop up in the mini-buffer as you start typing.&amp;lt;/sup&amp;gt; There is just one last problem with the front matter that needs to be fixed. There's about four spaces in front of each line from the exporter, you need to delete these for them to be properly parsed by Jekyll. File Extension This one got me tripped up for a little longer than I'd like to admit. Jekyll apparently looks for files with a full .markdown extension. If you have just the .md extensions that comes out of the org-export you will get a post takes web brutalism to heart. So rename and you're good to go. Now Jekyll will process this file as if you'd written it in regular Markdown and you're ready to keep on cooking. Next Steps Now that the basic idea has proven feasible and I know the basic tasks that need to be accomplished, let's build some tools to automate all this in a future post.</summary></entry><entry><title type="html">Front Matter</title><link href="https://www.ennuiocclusion.github.io/2017/12/27/front-matter.html" rel="alternate" type="text/html" title="Front Matter" /><published>2017-12-27T08:00:00-08:00</published><updated>2017-12-27T08:00:00-08:00</updated><id>https://www.ennuiocclusion.github.io/2017/12/27/front-matter</id><content type="html" xml:base="https://www.ennuiocclusion.github.io/2017/12/27/front-matter.html">&lt;h1&gt;Hello,&lt;/h1&gt;
&lt;p&gt;My name is Peter Morris. I've worked for a while as the Director of Post-Production for a small creative agency in Orlando. That's a made up job title that means I wore a lot of hats. I've worked in filming, lighting, editing, coloring, IT, sound design, VR, AR, pipeline management, and anything else that needed to get done to deliver a finished project.&lt;/p&gt;
&lt;p&gt;I'm at a bit of a turning point in my life and while I've enjoyed everything I've worked in so far I've found I have a real passion for programming. Programming is really the art of attempting to understand abstractions. It is the attempt to break apart real world problems into manageable enough pieces that you can map known abstractions over them.&lt;/p&gt;
&lt;p&gt;I want to take the knowledge that I've acquired about traditional crafts like cinematography and sound design and build better tools for creating the new interactive fictions that are becoming possible. The fact that Creative Technology is such a booming field is incredible, and I want to join in the conversation.&lt;/p&gt;
&lt;p&gt;I've been working hard over the past several months to bring my programming skills from active hobbyist with some pipeline and application hacking experience up to a much more productive level. I finally feel I'm at the level where I can start publishing work and getting input from others. This blog will document working to continually improve at this craft and hopefully be a point of contact to begin a discussion.&lt;/p&gt;
&lt;p&gt;My efforts right now are guided largely towards interactive experience scripting. I want to use all these new technologies using an expressive and robust langauge that makes working easier. Lisp is the best candidate I've found for this by far, so get ready for a lot of Clojure.&lt;/p&gt;
&lt;p&gt;I will also be working on continually improving this site itself, so there will be quite a few meta tagged posts about how best to use Jekyll with Emacs.&lt;/p&gt;
&lt;p&gt;Thanks for taking the time to read this far. Let's make some cool things together.&lt;/p&gt;</content><author><name></name></author><category term="meta" /><summary type="html">Hello, My name is Peter Morris. I've worked for a while as the Director of Post-Production for a small creative agency in Orlando. That's a made up job title that means I wore a lot of hats. I've worked in filming, lighting, editing, coloring, IT, sound design, VR, AR, pipeline management, and anything else that needed to get done to deliver a finished project. I'm at a bit of a turning point in my life and while I've enjoyed everything I've worked in so far I've found I have a real passion for programming. Programming is really the art of attempting to understand abstractions. It is the attempt to break apart real world problems into manageable enough pieces that you can map known abstractions over them. I want to take the knowledge that I've acquired about traditional crafts like cinematography and sound design and build better tools for creating the new interactive fictions that are becoming possible. The fact that Creative Technology is such a booming field is incredible, and I want to join in the conversation. I've been working hard over the past several months to bring my programming skills from active hobbyist with some pipeline and application hacking experience up to a much more productive level. I finally feel I'm at the level where I can start publishing work and getting input from others. This blog will document working to continually improve at this craft and hopefully be a point of contact to begin a discussion. My efforts right now are guided largely towards interactive experience scripting. I want to use all these new technologies using an expressive and robust langauge that makes working easier. Lisp is the best candidate I've found for this by far, so get ready for a lot of Clojure. I will also be working on continually improving this site itself, so there will be quite a few meta tagged posts about how best to use Jekyll with Emacs. Thanks for taking the time to read this far. Let's make some cool things together.</summary></entry></feed>